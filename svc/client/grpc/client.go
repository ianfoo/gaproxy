// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: feec04999c
// Version Date: Sat Mar 16 17:27:47 UTC 2019

// Package grpc provides a gRPC client for the GAProxy service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/ianfoo/gaproxy"
	"github.com/ianfoo/gaproxy/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.GAProxyServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var loginEndpoint endpoint.Endpoint
	{
		loginEndpoint = grpctransport.NewClient(
			conn,
			"gaproxy.GAProxy",
			"Login",
			EncodeGRPCLoginRequest,
			DecodeGRPCLoginResponse,
			pb.LoginResponse{},
			clientOptions...,
		).Endpoint()
	}

	var queryEndpoint endpoint.Endpoint
	{
		queryEndpoint = grpctransport.NewClient(
			conn,
			"gaproxy.GAProxy",
			"Query",
			EncodeGRPCQueryRequest,
			DecodeGRPCQueryResponse,
			pb.QueryResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		LoginEndpoint: loginEndpoint,
		QueryEndpoint: queryEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCLoginResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC login reply to a user-domain login response. Primarily useful in a client.
func DecodeGRPCLoginResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.LoginResponse)
	return reply, nil
}

// DecodeGRPCQueryResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC query reply to a user-domain query response. Primarily useful in a client.
func DecodeGRPCQueryResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.QueryResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCLoginRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain login request to a gRPC login request. Primarily useful in a client.
func EncodeGRPCLoginRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.LoginRequest)
	return req, nil
}

// EncodeGRPCQueryRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain query request to a gRPC query request. Primarily useful in a client.
func EncodeGRPCQueryRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.QueryRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
